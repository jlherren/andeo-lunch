#!/usr/bin/env node

import * as Transaction from '../src/transactionRebuilder.js';
import {Event, User} from '../src/db/models.js';
import {AndeoLunch} from '../src/andeoLunch.js';
import chalk from 'chalk';
import {getMainConfig} from '../src/configProvider.js';

/**
 * @param {Transaction} transaction
 * @return {Promise<Object<string, number>>}
 */
async function getBalances(transaction) {
    let users = await User.findAll({transaction, order: [['username', 'ASC']]});
    let balances = {};
    for (let user of users) {
        balances[`${user.username}/points`] = user.points;
        balances[`${user.username}/money`] = user.money;
    }
    return balances;
}

/**
 * Rebuild all transactions
 *
 * @param {boolean} doFix
 * @return {Promise<void>}
 */
async function rebuildTransactions(doFix) {
    console.log(chalk.bold('Rebuilding transactions and balances...'));

    let andeoLunch = new AndeoLunch({config: await getMainConfig()});
    await andeoLunch.waitReady();
    let sequelize = await andeoLunch.getSequelize();
    let transaction = await sequelize.transaction();

    try {
        let events = await Event.findAll({transaction, order: [['id', 'ASC']]});
        let nUpdatesTotal = 0;

        console.log(`Rebuilding ${events.length} events...`);
        for (let event of events) {
            console.log(`    rebuilding event ${event.id}`);
            await Transaction.rebuildLunchDetails(transaction, event);
            let {nUpdates} = await Transaction.rebuildEventTransactions(transaction, event);
            nUpdatesTotal += nUpdates;
        }
        console.log(`    updated ${nUpdatesTotal} transactions`);

        console.log('Rebuilding transaction balances...');
        let n = await Transaction.rebuildTransactionBalances(transaction, null);
        console.log(`    updated ${n} transaction balances`);

        console.log('Rebuilding final balances...');
        let beforeBalances = await getBalances(transaction);
        await Transaction.rebuildUserBalances(transaction);
        let afterBalances = await getBalances(transaction);
        for (let key of Object.keys(beforeBalances)) {
            let after = afterBalances[key];
            let before = beforeBalances[key];
            if (before !== after) {
                console.log(`    ${key} changed from ${before} to ${after}`);
            }
        }
    } catch (err) {
        await transaction.rollback();
        throw err;
    }

    if (doFix) {
        await transaction.commit();
        console.log(chalk.bold('Committing transaction...'));
    } else {
        await transaction.rollback();
        console.log(chalk.yellow('Rolling back transaction, use --commit to commit it'));
    }

    await andeoLunch.close();
}

// noinspection JSIgnoredPromiseFromCall
rebuildTransactions(process.argv[2] === '--commit');
